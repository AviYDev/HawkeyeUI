[{"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/index.js":"1","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/App.js":"2","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/reportWebVitals.js":"3","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Home/Home.js":"4","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Settings.js":"5","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Dashboard.js":"6","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Calibrage.js":"7"},{"size":449,"mtime":1611710671700,"results":"8","hashOfConfig":"9"},{"size":184,"mtime":1612397517579,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1611607367757,"results":"11","hashOfConfig":"9"},{"size":3847,"mtime":1612303399162,"results":"12","hashOfConfig":"9"},{"size":3275,"mtime":1612313097896,"results":"13","hashOfConfig":"9"},{"size":3257,"mtime":1612395081615,"results":"14","hashOfConfig":"9"},{"size":2974,"mtime":1612358185822,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1rk3skl",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/index.js",[],["33","34"],"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/App.js",[],"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/reportWebVitals.js",[],"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Home/Home.js",[],"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Settings.js",["35","36"],"import React, {\n    Component\n} from 'react';\nimport {Button} from \"react-bootstrap\";\nimport { BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport Calibrage from \"../Pages/Calibrage\";\n//import GITLABlogo from \"../Ressources/gitlab-logo.png\";\n\n\nclass Settings extends Component {\n\n\n    constructor(props) {\n\n\n        super(props);\n        this.hostname = 'http://127.0.0.1:5000'\n        //this.hostname = 'https://c90f8be03a89.ngrok.io'\n        this.calibrage = this.calibrage.bind(this)\n        this.appel = this.appel.bind(this)\n        this.userInfo = \"\";\n        this.state = {\n            userInfo : \"\",\n            gitlabKey: \"\",\n            isGitlabConnected : false,\n            userPayload:\"\",\n            balance : \"\",\n            showA : true,\n            redirect: false,\n\n        };\n\n    }\n    handleSubmit(event) {\n        event.preventDefault();\n    }\n    validateForm() {\n        return  this.state.gitlabKey.length > 0 ;\n    }\n\n  \n    calibrage(){\n        console.log(\"calibrage\")\n        fetch(this.hostname+'/settings/'+'calibrage', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body:JSON.stringify({\n                'value': \"lorem ipsum\",\n            })\n        }).then(\n            (result) => {\n                console.log(result);\n            },\n            (error) => {\n                console.log(\"error\");\n                console.log(error);\n               \n            }\n        )\n\n    }\n\n    appel(){\n        console.log(\"appel\")\n        fetch(this.hostname+'/settings/'+'appel', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body:JSON.stringify({\n                'value': \"lorem ipsum\",\n            })\n        }).then(\n            (result) => {\n                console.log(result);\n            },\n            (error) => {\n                console.log(\"error\");\n                console.log(error);\n               \n            }\n        )\n    }\n\n    render() {\n\n\n     \n            return (\n                <div className=\"\" style={{marginTop:'5%',float: 'left', width: '100%', paddingLeft:'20%'}} id=\"repositories\">\n                <div style={{textAlign: 'left'}}><p style={{fontSize: '1.8rem'}}>Activities</p>\n    \n             \n\n\n                                        <Router>\n                                        <Link to={\"/Pages/Calibrage\"}>\n                                            <Button  className=\"btn  btn-warning\" >Calibration</Button>\n                                        </Link>\n                                        <Link to={\"/Pages/Calibrage\"}>\n                                            <Button  className=\"btn  btn-warning\" >Call</Button>\n                                        </Link>\n                                       \n\n                                        <Switch>\n\n\n<Route path=\"/Pages/Calibrage\" component={(props) => <Calibrage{...props} /> } />\n\n</Switch>\n                             </Router>\n\n\n\n                </div>\n    \n           </div>\n                );\n\n             }\n }\n\nexport default Settings;\n\n","/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Dashboard.js",["37","38"],"/home/avinash/Documents/ECE/PFE/HawkeyeUI/src/Pages/Calibrage.js",["39"],"import React, {\n    Component,\n} from 'react';\n\nimport {Button} from \"react-bootstrap\";\nimport 'react-notifications/lib/notifications.css';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nclass Calibrage extends Component {\n\n\n    constructor(props) {\n        //http://localhost:3001\n        \n                super(props);\n                this.geteyes = this.geteyes.bind(this);\n                this.hostname = 'http://127.0.0.1:5000'\n                //this.hostname = 'https://c90f8be03a89.ngrok.io'\n                this.state = {\n                    gaze_status : \"None\",\n                    gaze_instructions : [\"Blinking\", \"Looking left\", \"Looking right\", \"Looking center\",\"Blinking\"],\n                    index : 0\n                };\n        \n            }\n        \n\n\n\n    geteyes(){\n        \n\n        fetch(this.hostname+'/data',  {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then( \n            (data) => {\n                \n                this.setState({\n                    gaze_status: data.gaze_status\n                });     \n                if (this.state.index < 5){\n                if (this.state.gaze_status === this.state.gaze_instructions[this.state.index]){\n                  \n                    this.setState({\n                        index: this.state.index + 1\n                        });\n                    }\n                    \n                }else{\n                    NotificationManager.success('Good','', 5000);\n                    this.setState({\n                        index: 0\n                        });\n                    \n                }\n            })\n            .catch(console.log)\n            setTimeout(this.geteyes, 800);\n    }\n\n\n    componentDidMount() {     \n        fetch(this.hostname+'/data',  {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n            .then( \n            (data) => {\n                \n                this.setState({\n                    gaze_status: data.gaze_status\n                });\n                console.log(data);                \n            })\n            .catch(console.log)\n\n           setTimeout(this.geteyes, 800);\n    }\n\n\n    render() {\n        return(\n            <div className=\"\" style={{marginTop:'5%',float: 'left', width: '100%', paddingLeft:'20%'}} id=\"repositories\">\n            <div style={{textAlign: 'left'}}><p style={{fontSize: '1.8rem'}}>Calibration : {this.state.gaze_instructions[this.state.index]} </p></div>\n            <p  style={{fontSize: '1.5rem', color : 'yellow'}}>\n                {this.state.gaze_status} </p>\n                <NotificationContainer/>\n            </div>\n        );\n    }\n}\n\nexport default Calibrage;\n\n",{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":44,"column":41,"nodeType":"46","messageId":"47","endLine":44,"endColumn":42},{"ruleId":"44","severity":1,"message":"45","line":68,"column":41,"nodeType":"46","messageId":"47","endLine":68,"endColumn":42},{"ruleId":"48","severity":1,"message":"49","line":5,"column":9,"nodeType":"50","messageId":"51","endLine":5,"endColumn":15},{"ruleId":"52","severity":1,"message":"53","line":46,"column":44,"nodeType":"46","messageId":"54","endLine":46,"endColumn":46},{"ruleId":"48","severity":1,"message":"49","line":5,"column":9,"nodeType":"50","messageId":"51","endLine":5,"endColumn":15},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","no-global-assign","no-unsafe-negation"]